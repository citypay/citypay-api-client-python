# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from citypay.models.paylink_state_event import PaylinkStateEvent
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaylinkTokenStatus(BaseModel):
    """
    PaylinkTokenStatus
    """ # noqa: E501
    amount_paid: Optional[StrictInt] = Field(default=None, description="the amount that has been paid against the session.")
    auth_code: Optional[StrictStr] = Field(default=None, description="an authorisation code if the transaction was processed and isPaid is true.")
    card: Optional[StrictStr] = Field(default=None, description="a description of the card that was used for payment if paid.")
    created: Optional[datetime] = Field(default=None, description="the date and time that the session was created.")
    date_time: Optional[datetime] = Field(default=None, description="the date and time of the current status.")
    identifier: Optional[StrictStr] = Field(default=None, description="the merchant identifier, to help identifying the token.")
    is_attachment: Optional[StrictBool] = Field(default=None, description="true if an attachment exists.")
    is_cancelled: Optional[StrictBool] = Field(default=None, description="true if the session was cancelled either by the user or by a system request.")
    is_closed: Optional[StrictBool] = Field(default=None, description="true if the token has been closed.")
    is_customer_receipt_email_sent: Optional[StrictBool] = Field(default=None, description="true if a customer receipt has been sent.")
    is_email_sent: Optional[StrictBool] = Field(default=None, description="true if an email was sent.")
    is_expired: Optional[StrictBool] = Field(default=None, description="true if the session has expired.")
    is_form_viewed: Optional[StrictBool] = Field(default=None, description="true if the form was ever displayed to the addressee.")
    is_merchant_notification_email_sent: Optional[StrictBool] = Field(default=None, description="true if a merchant notification receipt was sent.")
    is_open_for_payment: Optional[StrictBool] = Field(default=None, description="true if the session is still open for payment or false if it has been closed.")
    is_paid: Optional[StrictBool] = Field(default=None, description="whether the session has been paid and therefore can be considered as complete.")
    is_payment_attempted: Optional[StrictBool] = Field(default=None, description="true if payment has been attempted.")
    is_postback_ok: Optional[StrictBool] = Field(default=None, description="true if a post back was executed successfully.")
    is_request_challenged: Optional[StrictBool] = Field(default=None, description="true if the request has been challenged using 3-D Secure.")
    is_sms_sent: Optional[StrictBool] = Field(default=None, description="true if an SMS was sent.")
    is_validated: Optional[StrictBool] = Field(default=None, description="whether the token generation was successfully validated.")
    last_event_date_time: Optional[datetime] = Field(default=None, description="the date and time that the session last had an event actioned against it.")
    last_payment_result: Optional[StrictStr] = Field(default=None, description="the result of the last payment if one exists.")
    mid: Optional[StrictStr] = Field(default=None, description="identifies the merchant account.")
    payment_attempts_count: Optional[StrictInt] = Field(default=None, description="the number of attempts made to pay.")
    state_history: Optional[List[PaylinkStateEvent]] = None
    token: Optional[StrictStr] = Field(default=None, description="the token value which uniquely identifies the session.")
    trans_no: Optional[StrictInt] = Field(default=None, description="a transaction number if the transacstion was processed and isPaid is true.")
    __properties: ClassVar[List[str]] = ["amount_paid", "auth_code", "card", "created", "date_time", "identifier", "is_attachment", "is_cancelled", "is_closed", "is_customer_receipt_email_sent", "is_email_sent", "is_expired", "is_form_viewed", "is_merchant_notification_email_sent", "is_open_for_payment", "is_paid", "is_payment_attempted", "is_postback_ok", "is_request_challenged", "is_sms_sent", "is_validated", "last_event_date_time", "last_payment_result", "mid", "payment_attempts_count", "state_history", "token", "trans_no"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaylinkTokenStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in state_history (list)
        _items = []
        if self.state_history:
            for _item in self.state_history:
                if _item:
                    _items.append(_item.to_dict())
            _dict['state_history'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaylinkTokenStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount_paid": obj.get("amount_paid"),
            "auth_code": obj.get("auth_code"),
            "card": obj.get("card"),
            "created": obj.get("created"),
            "date_time": obj.get("date_time"),
            "identifier": obj.get("identifier"),
            "is_attachment": obj.get("is_attachment"),
            "is_cancelled": obj.get("is_cancelled"),
            "is_closed": obj.get("is_closed"),
            "is_customer_receipt_email_sent": obj.get("is_customer_receipt_email_sent"),
            "is_email_sent": obj.get("is_email_sent"),
            "is_expired": obj.get("is_expired"),
            "is_form_viewed": obj.get("is_form_viewed"),
            "is_merchant_notification_email_sent": obj.get("is_merchant_notification_email_sent"),
            "is_open_for_payment": obj.get("is_open_for_payment"),
            "is_paid": obj.get("is_paid"),
            "is_payment_attempted": obj.get("is_payment_attempted"),
            "is_postback_ok": obj.get("is_postback_ok"),
            "is_request_challenged": obj.get("is_request_challenged"),
            "is_sms_sent": obj.get("is_sms_sent"),
            "is_validated": obj.get("is_validated"),
            "last_event_date_time": obj.get("last_event_date_time"),
            "last_payment_result": obj.get("last_payment_result"),
            "mid": obj.get("mid"),
            "payment_attempts_count": obj.get("payment_attempts_count"),
            "state_history": [PaylinkStateEvent.from_dict(_item) for _item in obj.get("state_history")] if obj.get("state_history") is not None else None,
            "token": obj.get("token"),
            "trans_no": obj.get("trans_no")
        })
        return _obj


