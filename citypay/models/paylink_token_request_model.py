# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from citypay.models.paylink_card_holder import PaylinkCardHolder
from citypay.models.paylink_cart import PaylinkCart
from citypay.models.paylink_config import PaylinkConfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaylinkTokenRequestModel(BaseModel):
    """
    PaylinkTokenRequestModel
    """ # noqa: E501
    accountno: Optional[StrictStr] = Field(default=None, description="Specifies an alpha-numeric account number that the Paylink service uses when creating a Cardholder Account. The value should be no longer than 20 characters in length.")
    amount: StrictInt = Field(description="Specifies the intended value of the transaction in the lowest denomination with no spacing characters or decimal point. This is the net total to be processed. An example of Â£74.95 would be presented as 7495.")
    cardholder: Optional[PaylinkCardHolder] = None
    cart: Optional[PaylinkCart] = None
    client_version: Optional[StrictStr] = Field(default=None, description="The clientVersion field is used to specify the version of your application that has invoked the Paylink payment process. This feature is typically used for tracing issues relating to application deployments, or any Paylink integration module or plugin.")
    config: Optional[PaylinkConfig] = None
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="A currency for the token. This value should be only used on multi-currency accounts and be an appropriate currency which the account is configured for.")
    email: Optional[Annotated[str, Field(strict=True, max_length=254)]] = Field(default=None, description="The email field is used for the Merchant to be notified on completion of the transaction . The value may be supplied to override the default stored value. Emails sent to this address by the Paylink service should not be forwarded on to the cardholder as it may contain certain information that is used by the Paylink service to validate and authenticate Paylink Token Requests: for example, the Merchant ID and the licence key. ")
    identifier: Annotated[str, Field(min_length=4, strict=True, max_length=50)] = Field(description="Identifies a particular transaction linked to a Merchant account. It enables accurate duplicate checking within a pre-configured time period, as well as transaction reporting and tracing. The identifier should be unique to prevent payment card processing attempts from being rejected due to duplication. ")
    merchantid: StrictInt = Field(description="The merchant id you wish to process this transaction with.")
    recurring: Optional[StrictBool] = Field(default=None, description="True if the intent of this cardholder initiated transaction is to establish a recurring payment model, processable as merchant initiated transactions.")
    subscription_id: Optional[StrictStr] = Field(default=None, description="an id associated with a subscription to link the token request against.")
    tx_type: Optional[StrictStr] = Field(default=None, description="A value to override the transaction type if requested by your account manager.")
    __properties: ClassVar[List[str]] = ["accountno", "amount", "cardholder", "cart", "client_version", "config", "currency", "email", "identifier", "merchantid", "recurring", "subscription_id", "tx_type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaylinkTokenRequestModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cardholder
        if self.cardholder:
            _dict['cardholder'] = self.cardholder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cart
        if self.cart:
            _dict['cart'] = self.cart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaylinkTokenRequestModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accountno": obj.get("accountno"),
            "amount": obj.get("amount"),
            "cardholder": PaylinkCardHolder.from_dict(obj.get("cardholder")) if obj.get("cardholder") is not None else None,
            "cart": PaylinkCart.from_dict(obj.get("cart")) if obj.get("cart") is not None else None,
            "client_version": obj.get("client_version"),
            "config": PaylinkConfig.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "currency": obj.get("currency"),
            "email": obj.get("email"),
            "identifier": obj.get("identifier"),
            "merchantid": obj.get("merchantid"),
            "recurring": obj.get("recurring"),
            "subscription_id": obj.get("subscription_id"),
            "tx_type": obj.get("tx_type")
        })
        return _obj


