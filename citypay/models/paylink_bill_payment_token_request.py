# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from citypay.models.paylink_attachment_request import PaylinkAttachmentRequest
from citypay.models.paylink_email_notification_path import PaylinkEmailNotificationPath
from citypay.models.paylink_sms_notification_path import PaylinkSMSNotificationPath
from citypay.models.paylink_token_request_model import PaylinkTokenRequestModel
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaylinkBillPaymentTokenRequest(BaseModel):
    """
    PaylinkBillPaymentTokenRequest
    """ # noqa: E501
    addressee: Optional[StrictStr] = Field(default=None, description="Who the bill payment request intended for. This should be a readable name such as a person or company.")
    attachments: Optional[List[PaylinkAttachmentRequest]] = None
    descriptor: Optional[StrictStr] = Field(default=None, description="A descriptor for the bill payment used to describe what the payment request is for for instance \"Invoice\".  The descriptor can be used as descriptive text on emails or the payment page. For instance an invoice may have a button saying \"View Invoice\" or an email may say \"to pay your Invoice online\". ")
    due: Optional[date] = Field(default=None, description="A date that the invoice is due. This can be displayed on the payment page.")
    email_notification_path: Optional[PaylinkEmailNotificationPath] = None
    memo: Optional[StrictStr] = Field(default=None, description="A memo that can be added to the payment page and email to provide to the customer.")
    request: PaylinkTokenRequestModel
    sms_notification_path: Optional[PaylinkSMSNotificationPath] = None
    __properties: ClassVar[List[str]] = ["addressee", "attachments", "descriptor", "due", "email_notification_path", "memo", "request", "sms_notification_path"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaylinkBillPaymentTokenRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attachments (list)
        _items = []
        if self.attachments:
            for _item in self.attachments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attachments'] = _items
        # override the default output from pydantic by calling `to_dict()` of email_notification_path
        if self.email_notification_path:
            _dict['email_notification_path'] = self.email_notification_path.to_dict()
        # override the default output from pydantic by calling `to_dict()` of request
        if self.request:
            _dict['request'] = self.request.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sms_notification_path
        if self.sms_notification_path:
            _dict['sms_notification_path'] = self.sms_notification_path.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaylinkBillPaymentTokenRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "addressee": obj.get("addressee"),
            "attachments": [PaylinkAttachmentRequest.from_dict(_item) for _item in obj.get("attachments")] if obj.get("attachments") is not None else None,
            "descriptor": obj.get("descriptor"),
            "due": obj.get("due"),
            "email_notification_path": PaylinkEmailNotificationPath.from_dict(obj.get("email_notification_path")) if obj.get("email_notification_path") is not None else None,
            "memo": obj.get("memo"),
            "request": PaylinkTokenRequestModel.from_dict(obj.get("request")) if obj.get("request") is not None else None,
            "sms_notification_path": PaylinkSMSNotificationPath.from_dict(obj.get("sms_notification_path")) if obj.get("sms_notification_path") is not None else None
        })
        return _obj


