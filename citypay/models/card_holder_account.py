# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from citypay.models.card import Card
from citypay.models.contact_details import ContactDetails
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CardHolderAccount(BaseModel):
    """
    CardHolderAccount
    """ # noqa: E501
    account_id: Annotated[str, Field(min_length=5, strict=True, max_length=50)] = Field(description="The account id of the card holder account provided by the merchant which uniquely identifies the account. ")
    cards: Optional[List[Card]] = None
    contact: ContactDetails
    date_created: Optional[datetime] = Field(default=None, description="The date and time the account was created.")
    default_card_id: Optional[StrictStr] = Field(default=None, description="The id of the default card.")
    default_card_index: Optional[StrictInt] = Field(default=None, description="The index in the array of the default card.")
    last_modified: Optional[datetime] = Field(default=None, description="The date and time the account was last modified.")
    status: Optional[StrictStr] = Field(default=None, description="Defines the status of the account for processing valid values are   - ACTIVE for active accounts that are able to process   - DISABLED for accounts that are currently disabled for processing. ")
    unique_id: Optional[StrictStr] = Field(default=None, description="A unique id of the card holder account which uniquely identifies the stored account. This value is not searchable.")
    __properties: ClassVar[List[str]] = ["account_id", "cards", "contact", "date_created", "default_card_id", "default_card_index", "last_modified", "status", "unique_id"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CardHolderAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cards (list)
        _items = []
        if self.cards:
            for _item in self.cards:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of contact
        if self.contact:
            _dict['contact'] = self.contact.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CardHolderAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "cards": [Card.from_dict(_item) for _item in obj.get("cards")] if obj.get("cards") is not None else None,
            "contact": ContactDetails.from_dict(obj.get("contact")) if obj.get("contact") is not None else None,
            "date_created": obj.get("date_created"),
            "default_card_id": obj.get("default_card_id"),
            "default_card_index": obj.get("default_card_index"),
            "last_modified": obj.get("last_modified"),
            "status": obj.get("status"),
            "unique_id": obj.get("unique_id")
        })
        return _obj


