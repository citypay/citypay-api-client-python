# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Card(BaseModel):
    """
    Card
    """ # noqa: E501
    bin_commercial: Optional[StrictBool] = Field(default=None, description="Defines whether the card is a commercial card.")
    bin_corporate: Optional[StrictBool] = Field(default=None, description="Defines whether the card is a corporate business card.")
    bin_country_issued: Optional[StrictStr] = Field(default=None, description="The determined country where the card was issued.")
    bin_credit: Optional[StrictBool] = Field(default=None, description="Defines whether the card is a credit card.")
    bin_currency: Optional[StrictStr] = Field(default=None, description="The default currency determined for the card.")
    bin_debit: Optional[StrictBool] = Field(default=None, description="Defines whether the card is a debit card.")
    bin_description: Optional[StrictStr] = Field(default=None, description="A description of the bin on the card to identify what type of product the card is.")
    bin_eu: Optional[StrictBool] = Field(default=None, description="Defines whether the card is regulated within the EU.")
    card_id: Optional[StrictStr] = Field(default=None, description="The id of the card that is returned. Should be used for referencing the card when perform any changes.")
    card_status: Optional[StrictStr] = Field(default=None, description="The status of the card such, valid values are   - ACTIVE the card is active for processing   - INACTIVE the card is not active for processing   - EXPIRED for cards that have passed their expiry date. ")
    date_created: Optional[datetime] = Field(default=None, description="The date time of when the card was created.")
    default: Optional[StrictBool] = Field(default=None, description="Determines if the card is the default card for the account and should be regarded as the first option to be used for processing.")
    expmonth: Optional[Annotated[int, Field(le=12, strict=True, ge=1)]] = Field(default=None, description="The expiry month of the card.")
    expyear: Optional[Annotated[int, Field(le=2100, strict=True, ge=2000)]] = Field(default=None, description="The expiry year of the card.")
    label: Optional[StrictStr] = Field(default=None, description="A label which identifies this card.")
    label2: Optional[StrictStr] = Field(default=None, description="A label which also provides the expiry date of the card.")
    last4digits: Optional[StrictStr] = Field(default=None, description="The last 4 digits of the card to aid in identification.")
    name_on_card: Optional[Annotated[str, Field(min_length=2, strict=True, max_length=45)]] = Field(default=None, description="The name on the card.")
    scheme: Optional[StrictStr] = Field(default=None, description="The scheme that issued the card.")
    token: Optional[StrictStr] = Field(default=None, description="A token that can be used to process against the card.")
    __properties: ClassVar[List[str]] = ["bin_commercial", "bin_corporate", "bin_country_issued", "bin_credit", "bin_currency", "bin_debit", "bin_description", "bin_eu", "card_id", "card_status", "date_created", "default", "expmonth", "expyear", "label", "label2", "last4digits", "name_on_card", "scheme", "token"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Card from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Card from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bin_commercial": obj.get("bin_commercial"),
            "bin_corporate": obj.get("bin_corporate"),
            "bin_country_issued": obj.get("bin_country_issued"),
            "bin_credit": obj.get("bin_credit"),
            "bin_currency": obj.get("bin_currency"),
            "bin_debit": obj.get("bin_debit"),
            "bin_description": obj.get("bin_description"),
            "bin_eu": obj.get("bin_eu"),
            "card_id": obj.get("card_id"),
            "card_status": obj.get("card_status"),
            "date_created": obj.get("date_created"),
            "default": obj.get("default"),
            "expmonth": obj.get("expmonth"),
            "expyear": obj.get("expyear"),
            "label": obj.get("label"),
            "label2": obj.get("label2"),
            "last4digits": obj.get("last4digits"),
            "name_on_card": obj.get("name_on_card"),
            "scheme": obj.get("scheme"),
            "token": obj.get("token")
        })
        return _obj


