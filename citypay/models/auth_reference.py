# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AuthReference(BaseModel):
    """
    AuthReference
    """ # noqa: E501
    amount: Optional[Annotated[str, Field(strict=True, max_length=10)]] = Field(default=None, description="The amount of the transaction in decimal currency format.")
    amount_value: Optional[Annotated[int, Field(strict=True)]] = Field(default=None, description="The amount of the transaction in integer/request format.")
    atrn: Optional[StrictStr] = Field(default=None, description="A reference number provided by the acquiring services.")
    authcode: Optional[StrictStr] = Field(default=None, description="The authorisation code of the transaction returned by the acquirer or card issuer.")
    batchno: Optional[StrictStr] = Field(default=None, description="A batch number which the transaction has been end of day batched towards.")
    currency: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="The currency of the transaction in ISO 4217 code format.")
    date_time: Optional[datetime] = Field(default=None, description="The date and time of the transaction.")
    identifier: Optional[Annotated[str, Field(min_length=4, strict=True, max_length=50)]] = Field(default=None, description="The identifier of the transaction used to process the transaction.")
    maskedpan: Optional[StrictStr] = Field(default=None, description="A masking of the card number which was used to process the transaction.")
    merchantid: Optional[StrictInt] = Field(default=None, description="The merchant id of the transaction result.")
    result: Optional[StrictStr] = Field(default=None, description="The result of the transaction.")
    trans_status: Optional[StrictStr] = Field(default=None, description="The current status of the transaction through it's lifecycle.")
    trans_type: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="The type of transaction that was processed.")
    transno: Optional[StrictInt] = Field(default=None, description="The transaction number of the transaction.")
    __properties: ClassVar[List[str]] = ["amount", "amount_value", "atrn", "authcode", "batchno", "currency", "date_time", "identifier", "maskedpan", "merchantid", "result", "trans_status", "trans_type", "transno"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AuthReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AuthReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "amount_value": obj.get("amount_value"),
            "atrn": obj.get("atrn"),
            "authcode": obj.get("authcode"),
            "batchno": obj.get("batchno"),
            "currency": obj.get("currency"),
            "date_time": obj.get("datetime"),
            "identifier": obj.get("identifier"),
            "maskedpan": obj.get("maskedpan"),
            "merchantid": obj.get("merchantid"),
            "result": obj.get("result"),
            "trans_status": obj.get("trans_status"),
            "trans_type": obj.get("trans_type"),
            "transno": obj.get("transno")
        })
        return _obj


