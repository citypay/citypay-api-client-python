# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt
from pydantic import Field
from typing_extensions import Annotated
from citypay.models.airline_segment import AirlineSegment
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AirlineAdvice(BaseModel):
    """
    AirlineAdvice
    """ # noqa: E501
    carrier_name: Annotated[str, Field(strict=True, max_length=25)] = Field(description="The name of the airline carrier that generated the tickets for airline travel.")
    conjunction_ticket_indicator: Optional[StrictBool] = Field(default=None, description="true if a conjunction ticket (with additional coupons) was issued for an itinerary with more than four segments. Defaults to false. ")
    eticket_indicator: Optional[StrictBool] = Field(default=None, description="The Electronic Ticket Indicator, a code that indicates if an electronic ticket was issued.  Defaults to true.")
    no_air_segments: Optional[Annotated[int, Field(le=4, strict=True, ge=0)]] = Field(default=None, description="A value that indicates the number of air travel segments included on this ticket.  Valid entries include the numerals “0” through “4”. Required only if the transaction type is TKT or EXC. ")
    number_in_party: Optional[StrictInt] = Field(default=None, description="The number of people in the party.")
    original_ticket_no: Optional[Annotated[str, Field(strict=True, max_length=14)]] = Field(default=None, description="Required if transaction type is EXC.")
    passenger_name: Optional[Annotated[str, Field(strict=True, max_length=25)]] = Field(default=None, description="The name of the passenger when the traveller is not the card member that purchased the ticket. Required only if the transaction type is TKT or EXC.")
    segment1: AirlineSegment
    segment2: Optional[AirlineSegment] = None
    segment3: Optional[AirlineSegment] = None
    segment4: Optional[AirlineSegment] = None
    ticket_issue_city: Annotated[str, Field(strict=True, max_length=18)] = Field(description="The name of the city town or village where the transaction took place.")
    ticket_issue_date: date = Field(description="The date the ticket was issued in ISO Date format (yyyy-MM-dd).")
    ticket_issue_name: Annotated[str, Field(strict=True, max_length=26)] = Field(description="The name of the agency generating the ticket.")
    ticket_no: Annotated[str, Field(strict=True, max_length=14)] = Field(description="This must be a valid ticket number, i.e. numeric (the first 3 digits must represent the valid IATA plate carrier code). The final check digit should be validated prior to submission. On credit charges, this field should contain the number of the original ticket, and not of a replacement. ")
    transaction_type: Annotated[str, Field(min_length=3, strict=True, max_length=3)] = Field(description="This field contains the Transaction Type code assigned to this transaction. Valid codes include:   - `TKT` = Ticket Purchase   - `REF` = Refund   - `EXC` = Exchange Ticket   - `MSC` = Miscellaneous (non-Ticket Purchase- and non-Exchange Ticket-related transactions only). ")
    __properties: ClassVar[List[str]] = ["carrier_name", "conjunction_ticket_indicator", "eticket_indicator", "no_air_segments", "number_in_party", "original_ticket_no", "passenger_name", "segment1", "segment2", "segment3", "segment4", "ticket_issue_city", "ticket_issue_date", "ticket_issue_name", "ticket_no", "transaction_type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AirlineAdvice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of segment1
        if self.segment1:
            _dict['segment1'] = self.segment1.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment2
        if self.segment2:
            _dict['segment2'] = self.segment2.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment3
        if self.segment3:
            _dict['segment3'] = self.segment3.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment4
        if self.segment4:
            _dict['segment4'] = self.segment4.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AirlineAdvice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "carrier_name": obj.get("carrier_name"),
            "conjunction_ticket_indicator": obj.get("conjunction_ticket_indicator"),
            "eticket_indicator": obj.get("eticket_indicator"),
            "no_air_segments": obj.get("no_air_segments"),
            "number_in_party": obj.get("number_in_party"),
            "original_ticket_no": obj.get("original_ticket_no"),
            "passenger_name": obj.get("passenger_name"),
            "segment1": AirlineSegment.from_dict(obj.get("segment1")) if obj.get("segment1") is not None else None,
            "segment2": AirlineSegment.from_dict(obj.get("segment2")) if obj.get("segment2") is not None else None,
            "segment3": AirlineSegment.from_dict(obj.get("segment3")) if obj.get("segment3") is not None else None,
            "segment4": AirlineSegment.from_dict(obj.get("segment4")) if obj.get("segment4") is not None else None,
            "ticket_issue_city": obj.get("ticket_issue_city"),
            "ticket_issue_date": obj.get("ticket_issue_date"),
            "ticket_issue_name": obj.get("ticket_issue_name"),
            "ticket_no": obj.get("ticket_no"),
            "transaction_type": obj.get("transaction_type")
        })
        return _obj


