# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AirlineSegment(BaseModel):
    """
    AirlineSegment
    """ # noqa: E501
    arrival_location_code: Annotated[str, Field(strict=True, max_length=3)] = Field(description="A standard airline routing code (airport code or location identifier) applicable to the arrival portion of this segment. ")
    carrier_code: Annotated[str, Field(strict=True, max_length=2)] = Field(description="This field contains the two character airline designator code (air carrier code or airline code) that corresponds to the airline carrier applicable for up to four flight segments of this trip itinerary. ")
    class_service_code: Annotated[str, Field(strict=True, max_length=2)] = Field(description="This field contains a code that corresponds to the fare class (A, B, C, D, Premium, Discounted, etc.) within the overall class of service (e.g., First Class, Business, Economy) applicable to this travel segment, as specified in the IATA Standard Code allocation table. ")
    departure_date: date = Field(description="The Departure Date for the travel segment in ISO Date Format (yyyy-MM-dd).")
    departure_location_code: Optional[Annotated[str, Field(strict=True, max_length=3)]] = Field(default=None, description="A standard airline routing code (airport code or location identifier) applicable to the departure portion of this segment. ")
    flight_number: Annotated[str, Field(strict=True, max_length=4)] = Field(description="This field contains the carrier-assigned Flight Number for this travel segment.")
    segment_fare: Optional[StrictInt] = Field(default=None, description="This field contains the total Fare for this travel segment.")
    stop_over_indicator: Optional[Annotated[str, Field(strict=True, max_length=1)]] = Field(default=None, description="O = Stopover allowed, X = Stopover not allowed.")
    __properties: ClassVar[List[str]] = ["arrival_location_code", "carrier_code", "class_service_code", "departure_date", "departure_location_code", "flight_number", "segment_fare", "stop_over_indicator"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AirlineSegment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AirlineSegment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arrival_location_code": obj.get("arrival_location_code"),
            "carrier_code": obj.get("carrier_code"),
            "class_service_code": obj.get("class_service_code"),
            "departure_date": obj.get("departure_date"),
            "departure_location_code": obj.get("departure_location_code"),
            "flight_number": obj.get("flight_number"),
            "segment_fare": obj.get("segment_fare"),
            "stop_over_indicator": obj.get("stop_over_indicator")
        })
        return _obj


