# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is an HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokenized payments using cardholder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](https://citypay.github.io/api-docs/payment-api/#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive cardholder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities. 

    Contact: support@citypay.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from citypay.models.paylink_attachment_result import PaylinkAttachmentResult
from citypay.models.paylink_error_code import PaylinkErrorCode
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PaylinkTokenCreated(BaseModel):
    """
    PaylinkTokenCreated
    """ # noqa: E501
    attachments: Optional[PaylinkAttachmentResult] = None
    bps: Optional[StrictStr] = Field(default=None, description="true if BPS has been enabled on this token.")
    date_created: Optional[datetime] = Field(default=None, description="Date and time the token was generated.")
    errors: Optional[List[PaylinkErrorCode]] = None
    id: StrictStr = Field(description="A unique id of the request.")
    identifier: Optional[StrictStr] = Field(default=None, description="The identifier as presented in the TokenRequest.")
    mode: Optional[StrictStr] = Field(default=None, description="Determines whether the token is `live` or `test`.")
    qr_code: Optional[StrictStr] = Field(default=None, description="A URL of a qrcode which can be used to refer to the token URL.")
    result: StrictInt = Field(description="The result field contains the result for the Paylink Token Request. 0 - indicates that an error was encountered while creating the token. 1 - which indicates that a Token was successfully created.")
    server_version: Optional[StrictStr] = Field(default=None, description="the version of the server performing the call.")
    source: Optional[StrictStr] = Field(default=None, description="The incoming IP address of the call.")
    token: StrictStr = Field(description="A token generated for the request used to refer to the transaction in consequential calls.")
    url: Optional[StrictStr] = Field(default=None, description="The Paylink token URL used to checkout by the card holder.")
    usc: Optional[StrictStr] = Field(default=None, description="A UrlShortCode (USC) used for short links.")
    __properties: ClassVar[List[str]] = ["attachments", "bps", "date_created", "errors", "id", "identifier", "mode", "qr_code", "result", "server_version", "source", "token", "url", "usc"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PaylinkTokenCreated from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of attachments
        if self.attachments:
            _dict['attachments'] = self.attachments.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in errors (list)
        _items = []
        if self.errors:
            for _item in self.errors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['errors'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PaylinkTokenCreated from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attachments": PaylinkAttachmentResult.from_dict(obj.get("attachments")) if obj.get("attachments") is not None else None,
            "bps": obj.get("bps"),
            "date_created": obj.get("date_created"),
            "errors": [PaylinkErrorCode.from_dict(_item) for _item in obj.get("errors")] if obj.get("errors") is not None else None,
            "id": obj.get("id"),
            "identifier": obj.get("identifier"),
            "mode": obj.get("mode"),
            "qr_code": obj.get("qr_code"),
            "result": obj.get("result"),
            "server_version": obj.get("server_version"),
            "source": obj.get("source"),
            "token": obj.get("token"),
            "url": obj.get("url"),
            "usc": obj.get("usc")
        })
        return _obj


