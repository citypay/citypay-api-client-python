# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class ChargeRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "identifier",
            "amount",
            "merchantid",
            "token",
        }
        
        class properties:
            
            
            class amount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            
            
            class identifier(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 4
            merchantid = schemas.Int32Schema
            token = schemas.StrSchema
            avs_postcode_policy = schemas.StrSchema
            
            
            class cardholder_agreement(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1
            
            
            class csc(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
                    min_length = 3
            csc_policy = schemas.StrSchema
            
            
            class currency(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 3
                    min_length = 3
            duplicate_policy = schemas.StrSchema
            
            
            class initiation(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1
            match_avsa = schemas.StrSchema
        
            @staticmethod
            def threedsecure() -> typing.Type['ThreeDSecure']:
                return ThreeDSecure
            
            
            class trans_info(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
            
            
            class trans_type(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1
            __annotations__ = {
                "amount": amount,
                "identifier": identifier,
                "merchantid": merchantid,
                "token": token,
                "avs_postcode_policy": avs_postcode_policy,
                "cardholder_agreement": cardholder_agreement,
                "csc": csc,
                "csc_policy": csc_policy,
                "currency": currency,
                "duplicate_policy": duplicate_policy,
                "initiation": initiation,
                "match_avsa": match_avsa,
                "threedsecure": threedsecure,
                "trans_info": trans_info,
                "trans_type": trans_type,
            }
    
    identifier: MetaOapg.properties.identifier
    amount: MetaOapg.properties.amount
    merchantid: MetaOapg.properties.merchantid
    token: MetaOapg.properties.token
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantid"]) -> MetaOapg.properties.merchantid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avs_postcode_policy"]) -> MetaOapg.properties.avs_postcode_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardholder_agreement"]) -> MetaOapg.properties.cardholder_agreement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csc"]) -> MetaOapg.properties.csc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csc_policy"]) -> MetaOapg.properties.csc_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duplicate_policy"]) -> MetaOapg.properties.duplicate_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiation"]) -> MetaOapg.properties.initiation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["match_avsa"]) -> MetaOapg.properties.match_avsa: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threedsecure"]) -> 'ThreeDSecure': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trans_info"]) -> MetaOapg.properties.trans_info: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trans_type"]) -> MetaOapg.properties.trans_type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "identifier", "merchantid", "token", "avs_postcode_policy", "cardholder_agreement", "csc", "csc_policy", "currency", "duplicate_policy", "initiation", "match_avsa", "threedsecure", "trans_info", "trans_type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantid"]) -> MetaOapg.properties.merchantid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avs_postcode_policy"]) -> typing.Union[MetaOapg.properties.avs_postcode_policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardholder_agreement"]) -> typing.Union[MetaOapg.properties.cardholder_agreement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csc"]) -> typing.Union[MetaOapg.properties.csc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csc_policy"]) -> typing.Union[MetaOapg.properties.csc_policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duplicate_policy"]) -> typing.Union[MetaOapg.properties.duplicate_policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiation"]) -> typing.Union[MetaOapg.properties.initiation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["match_avsa"]) -> typing.Union[MetaOapg.properties.match_avsa, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threedsecure"]) -> typing.Union['ThreeDSecure', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trans_info"]) -> typing.Union[MetaOapg.properties.trans_info, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trans_type"]) -> typing.Union[MetaOapg.properties.trans_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "identifier", "merchantid", "token", "avs_postcode_policy", "cardholder_agreement", "csc", "csc_policy", "currency", "duplicate_policy", "initiation", "match_avsa", "threedsecure", "trans_info", "trans_type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, ],
        merchantid: typing.Union[MetaOapg.properties.merchantid, decimal.Decimal, int, ],
        token: typing.Union[MetaOapg.properties.token, str, ],
        avs_postcode_policy: typing.Union[MetaOapg.properties.avs_postcode_policy, str, schemas.Unset] = schemas.unset,
        cardholder_agreement: typing.Union[MetaOapg.properties.cardholder_agreement, str, schemas.Unset] = schemas.unset,
        csc: typing.Union[MetaOapg.properties.csc, str, schemas.Unset] = schemas.unset,
        csc_policy: typing.Union[MetaOapg.properties.csc_policy, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        duplicate_policy: typing.Union[MetaOapg.properties.duplicate_policy, str, schemas.Unset] = schemas.unset,
        initiation: typing.Union[MetaOapg.properties.initiation, str, schemas.Unset] = schemas.unset,
        match_avsa: typing.Union[MetaOapg.properties.match_avsa, str, schemas.Unset] = schemas.unset,
        threedsecure: typing.Union['ThreeDSecure', schemas.Unset] = schemas.unset,
        trans_info: typing.Union[MetaOapg.properties.trans_info, str, schemas.Unset] = schemas.unset,
        trans_type: typing.Union[MetaOapg.properties.trans_type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChargeRequest':
        return super().__new__(
            cls,
            *args,
            identifier=identifier,
            amount=amount,
            merchantid=merchantid,
            token=token,
            avs_postcode_policy=avs_postcode_policy,
            cardholder_agreement=cardholder_agreement,
            csc=csc,
            csc_policy=csc_policy,
            currency=currency,
            duplicate_policy=duplicate_policy,
            initiation=initiation,
            match_avsa=match_avsa,
            threedsecure=threedsecure,
            trans_info=trans_info,
            trans_type=trans_type,
            _configuration=_configuration,
            **kwargs,
        )

from citypay.model.three_d_secure import ThreeDSecure
