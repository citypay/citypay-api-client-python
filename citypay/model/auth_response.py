# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class AuthResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "result",
            "result_message",
            "merchantid",
            "result_code",
        }
        
        class properties:
            merchantid = schemas.Int32Schema
            result = schemas.Int32Schema
            result_code = schemas.StrSchema
            result_message = schemas.StrSchema
            amount = schemas.Int32Schema
            atrn = schemas.StrSchema
            atsd = schemas.StrSchema
            authcode = schemas.StrSchema
            authen_result = schemas.StrSchema
            authorised = schemas.BoolSchema
            avs_result = schemas.StrSchema
            bin_commercial = schemas.BoolSchema
            bin_debit = schemas.BoolSchema
            bin_description = schemas.StrSchema
            cavv = schemas.StrSchema
            context = schemas.StrSchema
            csc_result = schemas.StrSchema
            currency = schemas.StrSchema
            datetime = schemas.DateTimeSchema
            eci = schemas.StrSchema
            identifier = schemas.StrSchema
            live = schemas.BoolSchema
            maskedpan = schemas.StrSchema
            scheme = schemas.StrSchema
            sha256 = schemas.StrSchema
            trans_status = schemas.StrSchema
            transno = schemas.Int32Schema
            __annotations__ = {
                "merchantid": merchantid,
                "result": result,
                "result_code": result_code,
                "result_message": result_message,
                "amount": amount,
                "atrn": atrn,
                "atsd": atsd,
                "authcode": authcode,
                "authen_result": authen_result,
                "authorised": authorised,
                "avs_result": avs_result,
                "bin_commercial": bin_commercial,
                "bin_debit": bin_debit,
                "bin_description": bin_description,
                "cavv": cavv,
                "context": context,
                "csc_result": csc_result,
                "currency": currency,
                "datetime": datetime,
                "eci": eci,
                "identifier": identifier,
                "live": live,
                "maskedpan": maskedpan,
                "scheme": scheme,
                "sha256": sha256,
                "trans_status": trans_status,
                "transno": transno,
            }
    
    result: MetaOapg.properties.result
    result_message: MetaOapg.properties.result_message
    merchantid: MetaOapg.properties.merchantid
    result_code: MetaOapg.properties.result_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantid"]) -> MetaOapg.properties.merchantid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_code"]) -> MetaOapg.properties.result_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_message"]) -> MetaOapg.properties.result_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atrn"]) -> MetaOapg.properties.atrn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["atsd"]) -> MetaOapg.properties.atsd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authcode"]) -> MetaOapg.properties.authcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authen_result"]) -> MetaOapg.properties.authen_result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authorised"]) -> MetaOapg.properties.authorised: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avs_result"]) -> MetaOapg.properties.avs_result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin_commercial"]) -> MetaOapg.properties.bin_commercial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin_debit"]) -> MetaOapg.properties.bin_debit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bin_description"]) -> MetaOapg.properties.bin_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cavv"]) -> MetaOapg.properties.cavv: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> MetaOapg.properties.context: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csc_result"]) -> MetaOapg.properties.csc_result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eci"]) -> MetaOapg.properties.eci: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live"]) -> MetaOapg.properties.live: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maskedpan"]) -> MetaOapg.properties.maskedpan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheme"]) -> MetaOapg.properties.scheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sha256"]) -> MetaOapg.properties.sha256: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trans_status"]) -> MetaOapg.properties.trans_status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transno"]) -> MetaOapg.properties.transno: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["merchantid", "result", "result_code", "result_message", "amount", "atrn", "atsd", "authcode", "authen_result", "authorised", "avs_result", "bin_commercial", "bin_debit", "bin_description", "cavv", "context", "csc_result", "currency", "datetime", "eci", "identifier", "live", "maskedpan", "scheme", "sha256", "trans_status", "transno", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantid"]) -> MetaOapg.properties.merchantid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_code"]) -> MetaOapg.properties.result_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_message"]) -> MetaOapg.properties.result_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atrn"]) -> typing.Union[MetaOapg.properties.atrn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["atsd"]) -> typing.Union[MetaOapg.properties.atsd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authcode"]) -> typing.Union[MetaOapg.properties.authcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authen_result"]) -> typing.Union[MetaOapg.properties.authen_result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authorised"]) -> typing.Union[MetaOapg.properties.authorised, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avs_result"]) -> typing.Union[MetaOapg.properties.avs_result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin_commercial"]) -> typing.Union[MetaOapg.properties.bin_commercial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin_debit"]) -> typing.Union[MetaOapg.properties.bin_debit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bin_description"]) -> typing.Union[MetaOapg.properties.bin_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cavv"]) -> typing.Union[MetaOapg.properties.cavv, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> typing.Union[MetaOapg.properties.context, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csc_result"]) -> typing.Union[MetaOapg.properties.csc_result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> typing.Union[MetaOapg.properties.datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eci"]) -> typing.Union[MetaOapg.properties.eci, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live"]) -> typing.Union[MetaOapg.properties.live, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maskedpan"]) -> typing.Union[MetaOapg.properties.maskedpan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheme"]) -> typing.Union[MetaOapg.properties.scheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sha256"]) -> typing.Union[MetaOapg.properties.sha256, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trans_status"]) -> typing.Union[MetaOapg.properties.trans_status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transno"]) -> typing.Union[MetaOapg.properties.transno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["merchantid", "result", "result_code", "result_message", "amount", "atrn", "atsd", "authcode", "authen_result", "authorised", "avs_result", "bin_commercial", "bin_debit", "bin_description", "cavv", "context", "csc_result", "currency", "datetime", "eci", "identifier", "live", "maskedpan", "scheme", "sha256", "trans_status", "transno", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        result: typing.Union[MetaOapg.properties.result, decimal.Decimal, int, ],
        result_message: typing.Union[MetaOapg.properties.result_message, str, ],
        merchantid: typing.Union[MetaOapg.properties.merchantid, decimal.Decimal, int, ],
        result_code: typing.Union[MetaOapg.properties.result_code, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        atrn: typing.Union[MetaOapg.properties.atrn, str, schemas.Unset] = schemas.unset,
        atsd: typing.Union[MetaOapg.properties.atsd, str, schemas.Unset] = schemas.unset,
        authcode: typing.Union[MetaOapg.properties.authcode, str, schemas.Unset] = schemas.unset,
        authen_result: typing.Union[MetaOapg.properties.authen_result, str, schemas.Unset] = schemas.unset,
        authorised: typing.Union[MetaOapg.properties.authorised, bool, schemas.Unset] = schemas.unset,
        avs_result: typing.Union[MetaOapg.properties.avs_result, str, schemas.Unset] = schemas.unset,
        bin_commercial: typing.Union[MetaOapg.properties.bin_commercial, bool, schemas.Unset] = schemas.unset,
        bin_debit: typing.Union[MetaOapg.properties.bin_debit, bool, schemas.Unset] = schemas.unset,
        bin_description: typing.Union[MetaOapg.properties.bin_description, str, schemas.Unset] = schemas.unset,
        cavv: typing.Union[MetaOapg.properties.cavv, str, schemas.Unset] = schemas.unset,
        context: typing.Union[MetaOapg.properties.context, str, schemas.Unset] = schemas.unset,
        csc_result: typing.Union[MetaOapg.properties.csc_result, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        datetime: typing.Union[MetaOapg.properties.datetime, str, datetime, schemas.Unset] = schemas.unset,
        eci: typing.Union[MetaOapg.properties.eci, str, schemas.Unset] = schemas.unset,
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        live: typing.Union[MetaOapg.properties.live, bool, schemas.Unset] = schemas.unset,
        maskedpan: typing.Union[MetaOapg.properties.maskedpan, str, schemas.Unset] = schemas.unset,
        scheme: typing.Union[MetaOapg.properties.scheme, str, schemas.Unset] = schemas.unset,
        sha256: typing.Union[MetaOapg.properties.sha256, str, schemas.Unset] = schemas.unset,
        trans_status: typing.Union[MetaOapg.properties.trans_status, str, schemas.Unset] = schemas.unset,
        transno: typing.Union[MetaOapg.properties.transno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AuthResponse':
        return super().__new__(
            cls,
            *args,
            result=result,
            result_message=result_message,
            merchantid=merchantid,
            result_code=result_code,
            amount=amount,
            atrn=atrn,
            atsd=atsd,
            authcode=authcode,
            authen_result=authen_result,
            authorised=authorised,
            avs_result=avs_result,
            bin_commercial=bin_commercial,
            bin_debit=bin_debit,
            bin_description=bin_description,
            cavv=cavv,
            context=context,
            csc_result=csc_result,
            currency=currency,
            datetime=datetime,
            eci=eci,
            identifier=identifier,
            live=live,
            maskedpan=maskedpan,
            scheme=scheme,
            sha256=sha256,
            trans_status=trans_status,
            transno=transno,
            _configuration=_configuration,
            **kwargs,
        )
