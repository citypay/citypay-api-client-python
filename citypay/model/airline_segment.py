# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class AirlineSegment(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "flight_number",
            "class_service_code",
            "departure_date",
            "arrival_location_code",
            "carrier_code",
        }
        
        class properties:
            
            
            class arrival_location_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 3
            
            
            class carrier_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
            
            
            class class_service_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
            departure_date = schemas.DateSchema
            
            
            class flight_number(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 4
            
            
            class departure_location_code(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 3
            segment_fare = schemas.Int32Schema
            
            
            class stop_over_indicator(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 1
            __annotations__ = {
                "arrival_location_code": arrival_location_code,
                "carrier_code": carrier_code,
                "class_service_code": class_service_code,
                "departure_date": departure_date,
                "flight_number": flight_number,
                "departure_location_code": departure_location_code,
                "segment_fare": segment_fare,
                "stop_over_indicator": stop_over_indicator,
            }
    
    flight_number: MetaOapg.properties.flight_number
    class_service_code: MetaOapg.properties.class_service_code
    departure_date: MetaOapg.properties.departure_date
    arrival_location_code: MetaOapg.properties.arrival_location_code
    carrier_code: MetaOapg.properties.carrier_code
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["arrival_location_code"]) -> MetaOapg.properties.arrival_location_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_code"]) -> MetaOapg.properties.carrier_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["class_service_code"]) -> MetaOapg.properties.class_service_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departure_date"]) -> MetaOapg.properties.departure_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flight_number"]) -> MetaOapg.properties.flight_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["departure_location_code"]) -> MetaOapg.properties.departure_location_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment_fare"]) -> MetaOapg.properties.segment_fare: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_over_indicator"]) -> MetaOapg.properties.stop_over_indicator: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["arrival_location_code", "carrier_code", "class_service_code", "departure_date", "flight_number", "departure_location_code", "segment_fare", "stop_over_indicator", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["arrival_location_code"]) -> MetaOapg.properties.arrival_location_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_code"]) -> MetaOapg.properties.carrier_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["class_service_code"]) -> MetaOapg.properties.class_service_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departure_date"]) -> MetaOapg.properties.departure_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flight_number"]) -> MetaOapg.properties.flight_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["departure_location_code"]) -> typing.Union[MetaOapg.properties.departure_location_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment_fare"]) -> typing.Union[MetaOapg.properties.segment_fare, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_over_indicator"]) -> typing.Union[MetaOapg.properties.stop_over_indicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["arrival_location_code", "carrier_code", "class_service_code", "departure_date", "flight_number", "departure_location_code", "segment_fare", "stop_over_indicator", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        flight_number: typing.Union[MetaOapg.properties.flight_number, str, ],
        class_service_code: typing.Union[MetaOapg.properties.class_service_code, str, ],
        departure_date: typing.Union[MetaOapg.properties.departure_date, str, date, ],
        arrival_location_code: typing.Union[MetaOapg.properties.arrival_location_code, str, ],
        carrier_code: typing.Union[MetaOapg.properties.carrier_code, str, ],
        departure_location_code: typing.Union[MetaOapg.properties.departure_location_code, str, schemas.Unset] = schemas.unset,
        segment_fare: typing.Union[MetaOapg.properties.segment_fare, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stop_over_indicator: typing.Union[MetaOapg.properties.stop_over_indicator, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AirlineSegment':
        return super().__new__(
            cls,
            *args,
            flight_number=flight_number,
            class_service_code=class_service_code,
            departure_date=departure_date,
            arrival_location_code=arrival_location_code,
            carrier_code=carrier_code,
            departure_location_code=departure_location_code,
            segment_fare=segment_fare,
            stop_over_indicator=stop_over_indicator,
            _configuration=_configuration,
            **kwargs,
        )
