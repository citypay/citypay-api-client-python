# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class RegisterCard(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "expmonth",
            "expyear",
            "cardnumber",
        }
        
        class properties:
            
            
            class cardnumber(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 22
                    min_length = 12
            
            
            class expmonth(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 12
                    inclusive_minimum = 1
            
            
            class expyear(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 2100
                    inclusive_minimum = 2000
            default = schemas.BoolSchema
            
            
            class name_on_card(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 45
                    min_length = 2
            __annotations__ = {
                "cardnumber": cardnumber,
                "expmonth": expmonth,
                "expyear": expyear,
                "default": default,
                "name_on_card": name_on_card,
            }
    
    expmonth: MetaOapg.properties.expmonth
    expyear: MetaOapg.properties.expyear
    cardnumber: MetaOapg.properties.cardnumber
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardnumber"]) -> MetaOapg.properties.cardnumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expmonth"]) -> MetaOapg.properties.expmonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expyear"]) -> MetaOapg.properties.expyear: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_on_card"]) -> MetaOapg.properties.name_on_card: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cardnumber", "expmonth", "expyear", "default", "name_on_card", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardnumber"]) -> MetaOapg.properties.cardnumber: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expmonth"]) -> MetaOapg.properties.expmonth: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expyear"]) -> MetaOapg.properties.expyear: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_on_card"]) -> typing.Union[MetaOapg.properties.name_on_card, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cardnumber", "expmonth", "expyear", "default", "name_on_card", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        expmonth: typing.Union[MetaOapg.properties.expmonth, decimal.Decimal, int, ],
        expyear: typing.Union[MetaOapg.properties.expyear, decimal.Decimal, int, ],
        cardnumber: typing.Union[MetaOapg.properties.cardnumber, str, ],
        default: typing.Union[MetaOapg.properties.default, bool, schemas.Unset] = schemas.unset,
        name_on_card: typing.Union[MetaOapg.properties.name_on_card, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RegisterCard':
        return super().__new__(
            cls,
            *args,
            expmonth=expmonth,
            expyear=expyear,
            cardnumber=cardnumber,
            default=default,
            name_on_card=name_on_card,
            _configuration=_configuration,
            **kwargs,
        )
