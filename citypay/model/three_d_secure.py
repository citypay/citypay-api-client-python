# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class ThreeDSecure(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            accept_headers = schemas.StrSchema
            browserColorDepth = schemas.StrSchema
            browserIP = schemas.StrSchema
            browserJavaEnabled = schemas.StrSchema
            browserLanguage = schemas.StrSchema
            browserScreenHeight = schemas.StrSchema
            browserScreenWidth = schemas.StrSchema
            browserTZ = schemas.StrSchema
            cp_bx = schemas.StrSchema
            downgrade1 = schemas.BoolSchema
            merchant_termurl = schemas.StrSchema
            tds_policy = schemas.StrSchema
            user_agent = schemas.StrSchema
            __annotations__ = {
                "accept_headers": accept_headers,
                "browserColorDepth": browserColorDepth,
                "browserIP": browserIP,
                "browserJavaEnabled": browserJavaEnabled,
                "browserLanguage": browserLanguage,
                "browserScreenHeight": browserScreenHeight,
                "browserScreenWidth": browserScreenWidth,
                "browserTZ": browserTZ,
                "cp_bx": cp_bx,
                "downgrade1": downgrade1,
                "merchant_termurl": merchant_termurl,
                "tds_policy": tds_policy,
                "user_agent": user_agent,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accept_headers"]) -> MetaOapg.properties.accept_headers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserColorDepth"]) -> MetaOapg.properties.browserColorDepth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserIP"]) -> MetaOapg.properties.browserIP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserJavaEnabled"]) -> MetaOapg.properties.browserJavaEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserLanguage"]) -> MetaOapg.properties.browserLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserScreenHeight"]) -> MetaOapg.properties.browserScreenHeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserScreenWidth"]) -> MetaOapg.properties.browserScreenWidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["browserTZ"]) -> MetaOapg.properties.browserTZ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cp_bx"]) -> MetaOapg.properties.cp_bx: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downgrade1"]) -> MetaOapg.properties.downgrade1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchant_termurl"]) -> MetaOapg.properties.merchant_termurl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tds_policy"]) -> MetaOapg.properties.tds_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_agent"]) -> MetaOapg.properties.user_agent: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accept_headers", "browserColorDepth", "browserIP", "browserJavaEnabled", "browserLanguage", "browserScreenHeight", "browserScreenWidth", "browserTZ", "cp_bx", "downgrade1", "merchant_termurl", "tds_policy", "user_agent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accept_headers"]) -> typing.Union[MetaOapg.properties.accept_headers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserColorDepth"]) -> typing.Union[MetaOapg.properties.browserColorDepth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserIP"]) -> typing.Union[MetaOapg.properties.browserIP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserJavaEnabled"]) -> typing.Union[MetaOapg.properties.browserJavaEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserLanguage"]) -> typing.Union[MetaOapg.properties.browserLanguage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserScreenHeight"]) -> typing.Union[MetaOapg.properties.browserScreenHeight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserScreenWidth"]) -> typing.Union[MetaOapg.properties.browserScreenWidth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["browserTZ"]) -> typing.Union[MetaOapg.properties.browserTZ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cp_bx"]) -> typing.Union[MetaOapg.properties.cp_bx, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downgrade1"]) -> typing.Union[MetaOapg.properties.downgrade1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchant_termurl"]) -> typing.Union[MetaOapg.properties.merchant_termurl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tds_policy"]) -> typing.Union[MetaOapg.properties.tds_policy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_agent"]) -> typing.Union[MetaOapg.properties.user_agent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accept_headers", "browserColorDepth", "browserIP", "browserJavaEnabled", "browserLanguage", "browserScreenHeight", "browserScreenWidth", "browserTZ", "cp_bx", "downgrade1", "merchant_termurl", "tds_policy", "user_agent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accept_headers: typing.Union[MetaOapg.properties.accept_headers, str, schemas.Unset] = schemas.unset,
        browserColorDepth: typing.Union[MetaOapg.properties.browserColorDepth, str, schemas.Unset] = schemas.unset,
        browserIP: typing.Union[MetaOapg.properties.browserIP, str, schemas.Unset] = schemas.unset,
        browserJavaEnabled: typing.Union[MetaOapg.properties.browserJavaEnabled, str, schemas.Unset] = schemas.unset,
        browserLanguage: typing.Union[MetaOapg.properties.browserLanguage, str, schemas.Unset] = schemas.unset,
        browserScreenHeight: typing.Union[MetaOapg.properties.browserScreenHeight, str, schemas.Unset] = schemas.unset,
        browserScreenWidth: typing.Union[MetaOapg.properties.browserScreenWidth, str, schemas.Unset] = schemas.unset,
        browserTZ: typing.Union[MetaOapg.properties.browserTZ, str, schemas.Unset] = schemas.unset,
        cp_bx: typing.Union[MetaOapg.properties.cp_bx, str, schemas.Unset] = schemas.unset,
        downgrade1: typing.Union[MetaOapg.properties.downgrade1, bool, schemas.Unset] = schemas.unset,
        merchant_termurl: typing.Union[MetaOapg.properties.merchant_termurl, str, schemas.Unset] = schemas.unset,
        tds_policy: typing.Union[MetaOapg.properties.tds_policy, str, schemas.Unset] = schemas.unset,
        user_agent: typing.Union[MetaOapg.properties.user_agent, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThreeDSecure':
        return super().__new__(
            cls,
            *args,
            accept_headers=accept_headers,
            browserColorDepth=browserColorDepth,
            browserIP=browserIP,
            browserJavaEnabled=browserJavaEnabled,
            browserLanguage=browserLanguage,
            browserScreenHeight=browserScreenHeight,
            browserScreenWidth=browserScreenWidth,
            browserTZ=browserTZ,
            cp_bx=cp_bx,
            downgrade1=downgrade1,
            merchant_termurl=merchant_termurl,
            tds_policy=tds_policy,
            user_agent=user_agent,
            _configuration=_configuration,
            **kwargs,
        )
