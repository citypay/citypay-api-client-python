# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class PaylinkUI(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            address_mandatory = schemas.BoolSchema
            form_auto_complete = schemas.StrSchema
            ordering = schemas.Int32Schema
            postcode_mandatory = schemas.BoolSchema
            __annotations__ = {
                "address_mandatory": address_mandatory,
                "form_auto_complete": form_auto_complete,
                "ordering": ordering,
                "postcode_mandatory": postcode_mandatory,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address_mandatory"]) -> MetaOapg.properties.address_mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form_auto_complete"]) -> MetaOapg.properties.form_auto_complete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ordering"]) -> MetaOapg.properties.ordering: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postcode_mandatory"]) -> MetaOapg.properties.postcode_mandatory: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["address_mandatory", "form_auto_complete", "ordering", "postcode_mandatory", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address_mandatory"]) -> typing.Union[MetaOapg.properties.address_mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form_auto_complete"]) -> typing.Union[MetaOapg.properties.form_auto_complete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ordering"]) -> typing.Union[MetaOapg.properties.ordering, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postcode_mandatory"]) -> typing.Union[MetaOapg.properties.postcode_mandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["address_mandatory", "form_auto_complete", "ordering", "postcode_mandatory", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        address_mandatory: typing.Union[MetaOapg.properties.address_mandatory, bool, schemas.Unset] = schemas.unset,
        form_auto_complete: typing.Union[MetaOapg.properties.form_auto_complete, str, schemas.Unset] = schemas.unset,
        ordering: typing.Union[MetaOapg.properties.ordering, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        postcode_mandatory: typing.Union[MetaOapg.properties.postcode_mandatory, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaylinkUI':
        return super().__new__(
            cls,
            *args,
            address_mandatory=address_mandatory,
            form_auto_complete=form_auto_complete,
            ordering=ordering,
            postcode_mandatory=postcode_mandatory,
            _configuration=_configuration,
            **kwargs,
        )
