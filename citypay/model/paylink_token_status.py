# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class PaylinkTokenStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            amount_paid = schemas.Int32Schema
            auth_code = schemas.StrSchema
            card = schemas.StrSchema
            created = schemas.DateTimeSchema
            datetime = schemas.DateTimeSchema
            identifier = schemas.StrSchema
            is_attachment = schemas.BoolSchema
            is_cancelled = schemas.BoolSchema
            is_closed = schemas.BoolSchema
            is_customer_receipt_email_sent = schemas.BoolSchema
            is_email_sent = schemas.BoolSchema
            is_expired = schemas.BoolSchema
            is_form_viewed = schemas.BoolSchema
            is_merchant_notification_email_sent = schemas.BoolSchema
            is_open_for_payment = schemas.BoolSchema
            is_paid = schemas.BoolSchema
            is_payment_attempted = schemas.BoolSchema
            is_postback_ok = schemas.BoolSchema
            is_request_challenged = schemas.BoolSchema
            is_sms_sent = schemas.BoolSchema
            is_validated = schemas.BoolSchema
            last_event_date_time = schemas.DateTimeSchema
            last_payment_result = schemas.StrSchema
            mid = schemas.StrSchema
            payment_attempts_count = schemas.Int32Schema
            
            
            class state_history(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PaylinkStateEvent']:
                        return PaylinkStateEvent
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PaylinkStateEvent'], typing.List['PaylinkStateEvent']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_history':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PaylinkStateEvent':
                    return super().__getitem__(i)
            token = schemas.StrSchema
            trans_no = schemas.Int32Schema
            __annotations__ = {
                "amount_paid": amount_paid,
                "auth_code": auth_code,
                "card": card,
                "created": created,
                "datetime": datetime,
                "identifier": identifier,
                "is_attachment": is_attachment,
                "is_cancelled": is_cancelled,
                "is_closed": is_closed,
                "is_customer_receipt_email_sent": is_customer_receipt_email_sent,
                "is_email_sent": is_email_sent,
                "is_expired": is_expired,
                "is_form_viewed": is_form_viewed,
                "is_merchant_notification_email_sent": is_merchant_notification_email_sent,
                "is_open_for_payment": is_open_for_payment,
                "is_paid": is_paid,
                "is_payment_attempted": is_payment_attempted,
                "is_postback_ok": is_postback_ok,
                "is_request_challenged": is_request_challenged,
                "is_sms_sent": is_sms_sent,
                "is_validated": is_validated,
                "last_event_date_time": last_event_date_time,
                "last_payment_result": last_payment_result,
                "mid": mid,
                "payment_attempts_count": payment_attempts_count,
                "state_history": state_history,
                "token": token,
                "trans_no": trans_no,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount_paid"]) -> MetaOapg.properties.amount_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_code"]) -> MetaOapg.properties.auth_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card"]) -> MetaOapg.properties.card: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_attachment"]) -> MetaOapg.properties.is_attachment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_cancelled"]) -> MetaOapg.properties.is_cancelled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_closed"]) -> MetaOapg.properties.is_closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_customer_receipt_email_sent"]) -> MetaOapg.properties.is_customer_receipt_email_sent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_email_sent"]) -> MetaOapg.properties.is_email_sent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_expired"]) -> MetaOapg.properties.is_expired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_form_viewed"]) -> MetaOapg.properties.is_form_viewed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_merchant_notification_email_sent"]) -> MetaOapg.properties.is_merchant_notification_email_sent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_open_for_payment"]) -> MetaOapg.properties.is_open_for_payment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_paid"]) -> MetaOapg.properties.is_paid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_payment_attempted"]) -> MetaOapg.properties.is_payment_attempted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_postback_ok"]) -> MetaOapg.properties.is_postback_ok: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_request_challenged"]) -> MetaOapg.properties.is_request_challenged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_sms_sent"]) -> MetaOapg.properties.is_sms_sent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_validated"]) -> MetaOapg.properties.is_validated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_event_date_time"]) -> MetaOapg.properties.last_event_date_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_payment_result"]) -> MetaOapg.properties.last_payment_result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mid"]) -> MetaOapg.properties.mid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_attempts_count"]) -> MetaOapg.properties.payment_attempts_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_history"]) -> MetaOapg.properties.state_history: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["token"]) -> MetaOapg.properties.token: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trans_no"]) -> MetaOapg.properties.trans_no: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount_paid", "auth_code", "card", "created", "datetime", "identifier", "is_attachment", "is_cancelled", "is_closed", "is_customer_receipt_email_sent", "is_email_sent", "is_expired", "is_form_viewed", "is_merchant_notification_email_sent", "is_open_for_payment", "is_paid", "is_payment_attempted", "is_postback_ok", "is_request_challenged", "is_sms_sent", "is_validated", "last_event_date_time", "last_payment_result", "mid", "payment_attempts_count", "state_history", "token", "trans_no", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount_paid"]) -> typing.Union[MetaOapg.properties.amount_paid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_code"]) -> typing.Union[MetaOapg.properties.auth_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union[MetaOapg.properties.card, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> typing.Union[MetaOapg.properties.datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> typing.Union[MetaOapg.properties.identifier, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_attachment"]) -> typing.Union[MetaOapg.properties.is_attachment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_cancelled"]) -> typing.Union[MetaOapg.properties.is_cancelled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_closed"]) -> typing.Union[MetaOapg.properties.is_closed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_customer_receipt_email_sent"]) -> typing.Union[MetaOapg.properties.is_customer_receipt_email_sent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_email_sent"]) -> typing.Union[MetaOapg.properties.is_email_sent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_expired"]) -> typing.Union[MetaOapg.properties.is_expired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_form_viewed"]) -> typing.Union[MetaOapg.properties.is_form_viewed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_merchant_notification_email_sent"]) -> typing.Union[MetaOapg.properties.is_merchant_notification_email_sent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_open_for_payment"]) -> typing.Union[MetaOapg.properties.is_open_for_payment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_paid"]) -> typing.Union[MetaOapg.properties.is_paid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_payment_attempted"]) -> typing.Union[MetaOapg.properties.is_payment_attempted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_postback_ok"]) -> typing.Union[MetaOapg.properties.is_postback_ok, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_request_challenged"]) -> typing.Union[MetaOapg.properties.is_request_challenged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_sms_sent"]) -> typing.Union[MetaOapg.properties.is_sms_sent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_validated"]) -> typing.Union[MetaOapg.properties.is_validated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_event_date_time"]) -> typing.Union[MetaOapg.properties.last_event_date_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_payment_result"]) -> typing.Union[MetaOapg.properties.last_payment_result, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mid"]) -> typing.Union[MetaOapg.properties.mid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_attempts_count"]) -> typing.Union[MetaOapg.properties.payment_attempts_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_history"]) -> typing.Union[MetaOapg.properties.state_history, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["token"]) -> typing.Union[MetaOapg.properties.token, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trans_no"]) -> typing.Union[MetaOapg.properties.trans_no, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount_paid", "auth_code", "card", "created", "datetime", "identifier", "is_attachment", "is_cancelled", "is_closed", "is_customer_receipt_email_sent", "is_email_sent", "is_expired", "is_form_viewed", "is_merchant_notification_email_sent", "is_open_for_payment", "is_paid", "is_payment_attempted", "is_postback_ok", "is_request_challenged", "is_sms_sent", "is_validated", "last_event_date_time", "last_payment_result", "mid", "payment_attempts_count", "state_history", "token", "trans_no", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        amount_paid: typing.Union[MetaOapg.properties.amount_paid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        auth_code: typing.Union[MetaOapg.properties.auth_code, str, schemas.Unset] = schemas.unset,
        card: typing.Union[MetaOapg.properties.card, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        datetime: typing.Union[MetaOapg.properties.datetime, str, datetime, schemas.Unset] = schemas.unset,
        identifier: typing.Union[MetaOapg.properties.identifier, str, schemas.Unset] = schemas.unset,
        is_attachment: typing.Union[MetaOapg.properties.is_attachment, bool, schemas.Unset] = schemas.unset,
        is_cancelled: typing.Union[MetaOapg.properties.is_cancelled, bool, schemas.Unset] = schemas.unset,
        is_closed: typing.Union[MetaOapg.properties.is_closed, bool, schemas.Unset] = schemas.unset,
        is_customer_receipt_email_sent: typing.Union[MetaOapg.properties.is_customer_receipt_email_sent, bool, schemas.Unset] = schemas.unset,
        is_email_sent: typing.Union[MetaOapg.properties.is_email_sent, bool, schemas.Unset] = schemas.unset,
        is_expired: typing.Union[MetaOapg.properties.is_expired, bool, schemas.Unset] = schemas.unset,
        is_form_viewed: typing.Union[MetaOapg.properties.is_form_viewed, bool, schemas.Unset] = schemas.unset,
        is_merchant_notification_email_sent: typing.Union[MetaOapg.properties.is_merchant_notification_email_sent, bool, schemas.Unset] = schemas.unset,
        is_open_for_payment: typing.Union[MetaOapg.properties.is_open_for_payment, bool, schemas.Unset] = schemas.unset,
        is_paid: typing.Union[MetaOapg.properties.is_paid, bool, schemas.Unset] = schemas.unset,
        is_payment_attempted: typing.Union[MetaOapg.properties.is_payment_attempted, bool, schemas.Unset] = schemas.unset,
        is_postback_ok: typing.Union[MetaOapg.properties.is_postback_ok, bool, schemas.Unset] = schemas.unset,
        is_request_challenged: typing.Union[MetaOapg.properties.is_request_challenged, bool, schemas.Unset] = schemas.unset,
        is_sms_sent: typing.Union[MetaOapg.properties.is_sms_sent, bool, schemas.Unset] = schemas.unset,
        is_validated: typing.Union[MetaOapg.properties.is_validated, bool, schemas.Unset] = schemas.unset,
        last_event_date_time: typing.Union[MetaOapg.properties.last_event_date_time, str, datetime, schemas.Unset] = schemas.unset,
        last_payment_result: typing.Union[MetaOapg.properties.last_payment_result, str, schemas.Unset] = schemas.unset,
        mid: typing.Union[MetaOapg.properties.mid, str, schemas.Unset] = schemas.unset,
        payment_attempts_count: typing.Union[MetaOapg.properties.payment_attempts_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        state_history: typing.Union[MetaOapg.properties.state_history, list, tuple, schemas.Unset] = schemas.unset,
        token: typing.Union[MetaOapg.properties.token, str, schemas.Unset] = schemas.unset,
        trans_no: typing.Union[MetaOapg.properties.trans_no, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaylinkTokenStatus':
        return super().__new__(
            cls,
            *args,
            amount_paid=amount_paid,
            auth_code=auth_code,
            card=card,
            created=created,
            datetime=datetime,
            identifier=identifier,
            is_attachment=is_attachment,
            is_cancelled=is_cancelled,
            is_closed=is_closed,
            is_customer_receipt_email_sent=is_customer_receipt_email_sent,
            is_email_sent=is_email_sent,
            is_expired=is_expired,
            is_form_viewed=is_form_viewed,
            is_merchant_notification_email_sent=is_merchant_notification_email_sent,
            is_open_for_payment=is_open_for_payment,
            is_paid=is_paid,
            is_payment_attempted=is_payment_attempted,
            is_postback_ok=is_postback_ok,
            is_request_challenged=is_request_challenged,
            is_sms_sent=is_sms_sent,
            is_validated=is_validated,
            last_event_date_time=last_event_date_time,
            last_payment_result=last_payment_result,
            mid=mid,
            payment_attempts_count=payment_attempts_count,
            state_history=state_history,
            token=token,
            trans_no=trans_no,
            _configuration=_configuration,
            **kwargs,
        )

from citypay.model.paylink_state_event import PaylinkStateEvent
