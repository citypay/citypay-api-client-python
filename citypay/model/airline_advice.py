# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class AirlineAdvice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "segment1",
            "number_in_party",
            "ticket_no",
            "ticket_issue_name",
            "transaction_type",
            "carrier_name",
            "ticket_issue_city",
            "ticket_issue_date",
        }
        
        class properties:
            
            
            class carrier_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
            number_in_party = schemas.Int32Schema
        
            @staticmethod
            def segment1() -> typing.Type['AirlineSegment']:
                return AirlineSegment
            
            
            class ticket_issue_city(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 18
            ticket_issue_date = schemas.DateSchema
            
            
            class ticket_issue_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 26
            
            
            class ticket_no(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 14
            
            
            class transaction_type(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 3
                    min_length = 3
            conjunction_ticket_indicator = schemas.BoolSchema
            eticket_indicator = schemas.BoolSchema
            
            
            class no_air_segments(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
                    inclusive_maximum = 4
                    inclusive_minimum = 0
            
            
            class original_ticket_no(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 14
            
            
            class passenger_name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 25
        
            @staticmethod
            def segment2() -> typing.Type['AirlineSegment']:
                return AirlineSegment
        
            @staticmethod
            def segment3() -> typing.Type['AirlineSegment']:
                return AirlineSegment
        
            @staticmethod
            def segment4() -> typing.Type['AirlineSegment']:
                return AirlineSegment
            __annotations__ = {
                "carrier_name": carrier_name,
                "number_in_party": number_in_party,
                "segment1": segment1,
                "ticket_issue_city": ticket_issue_city,
                "ticket_issue_date": ticket_issue_date,
                "ticket_issue_name": ticket_issue_name,
                "ticket_no": ticket_no,
                "transaction_type": transaction_type,
                "conjunction_ticket_indicator": conjunction_ticket_indicator,
                "eticket_indicator": eticket_indicator,
                "no_air_segments": no_air_segments,
                "original_ticket_no": original_ticket_no,
                "passenger_name": passenger_name,
                "segment2": segment2,
                "segment3": segment3,
                "segment4": segment4,
            }
    
    segment1: 'AirlineSegment'
    number_in_party: MetaOapg.properties.number_in_party
    ticket_no: MetaOapg.properties.ticket_no
    ticket_issue_name: MetaOapg.properties.ticket_issue_name
    transaction_type: MetaOapg.properties.transaction_type
    carrier_name: MetaOapg.properties.carrier_name
    ticket_issue_city: MetaOapg.properties.ticket_issue_city
    ticket_issue_date: MetaOapg.properties.ticket_issue_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carrier_name"]) -> MetaOapg.properties.carrier_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["number_in_party"]) -> MetaOapg.properties.number_in_party: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment1"]) -> 'AirlineSegment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticket_issue_city"]) -> MetaOapg.properties.ticket_issue_city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticket_issue_date"]) -> MetaOapg.properties.ticket_issue_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticket_issue_name"]) -> MetaOapg.properties.ticket_issue_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticket_no"]) -> MetaOapg.properties.ticket_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transaction_type"]) -> MetaOapg.properties.transaction_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conjunction_ticket_indicator"]) -> MetaOapg.properties.conjunction_ticket_indicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eticket_indicator"]) -> MetaOapg.properties.eticket_indicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["no_air_segments"]) -> MetaOapg.properties.no_air_segments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["original_ticket_no"]) -> MetaOapg.properties.original_ticket_no: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["passenger_name"]) -> MetaOapg.properties.passenger_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment2"]) -> 'AirlineSegment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment3"]) -> 'AirlineSegment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["segment4"]) -> 'AirlineSegment': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["carrier_name", "number_in_party", "segment1", "ticket_issue_city", "ticket_issue_date", "ticket_issue_name", "ticket_no", "transaction_type", "conjunction_ticket_indicator", "eticket_indicator", "no_air_segments", "original_ticket_no", "passenger_name", "segment2", "segment3", "segment4", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carrier_name"]) -> MetaOapg.properties.carrier_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["number_in_party"]) -> MetaOapg.properties.number_in_party: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment1"]) -> 'AirlineSegment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticket_issue_city"]) -> MetaOapg.properties.ticket_issue_city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticket_issue_date"]) -> MetaOapg.properties.ticket_issue_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticket_issue_name"]) -> MetaOapg.properties.ticket_issue_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticket_no"]) -> MetaOapg.properties.ticket_no: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transaction_type"]) -> MetaOapg.properties.transaction_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conjunction_ticket_indicator"]) -> typing.Union[MetaOapg.properties.conjunction_ticket_indicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eticket_indicator"]) -> typing.Union[MetaOapg.properties.eticket_indicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["no_air_segments"]) -> typing.Union[MetaOapg.properties.no_air_segments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["original_ticket_no"]) -> typing.Union[MetaOapg.properties.original_ticket_no, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["passenger_name"]) -> typing.Union[MetaOapg.properties.passenger_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment2"]) -> typing.Union['AirlineSegment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment3"]) -> typing.Union['AirlineSegment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["segment4"]) -> typing.Union['AirlineSegment', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["carrier_name", "number_in_party", "segment1", "ticket_issue_city", "ticket_issue_date", "ticket_issue_name", "ticket_no", "transaction_type", "conjunction_ticket_indicator", "eticket_indicator", "no_air_segments", "original_ticket_no", "passenger_name", "segment2", "segment3", "segment4", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        segment1: 'AirlineSegment',
        number_in_party: typing.Union[MetaOapg.properties.number_in_party, decimal.Decimal, int, ],
        ticket_no: typing.Union[MetaOapg.properties.ticket_no, str, ],
        ticket_issue_name: typing.Union[MetaOapg.properties.ticket_issue_name, str, ],
        transaction_type: typing.Union[MetaOapg.properties.transaction_type, str, ],
        carrier_name: typing.Union[MetaOapg.properties.carrier_name, str, ],
        ticket_issue_city: typing.Union[MetaOapg.properties.ticket_issue_city, str, ],
        ticket_issue_date: typing.Union[MetaOapg.properties.ticket_issue_date, str, date, ],
        conjunction_ticket_indicator: typing.Union[MetaOapg.properties.conjunction_ticket_indicator, bool, schemas.Unset] = schemas.unset,
        eticket_indicator: typing.Union[MetaOapg.properties.eticket_indicator, bool, schemas.Unset] = schemas.unset,
        no_air_segments: typing.Union[MetaOapg.properties.no_air_segments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        original_ticket_no: typing.Union[MetaOapg.properties.original_ticket_no, str, schemas.Unset] = schemas.unset,
        passenger_name: typing.Union[MetaOapg.properties.passenger_name, str, schemas.Unset] = schemas.unset,
        segment2: typing.Union['AirlineSegment', schemas.Unset] = schemas.unset,
        segment3: typing.Union['AirlineSegment', schemas.Unset] = schemas.unset,
        segment4: typing.Union['AirlineSegment', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AirlineAdvice':
        return super().__new__(
            cls,
            *args,
            segment1=segment1,
            number_in_party=number_in_party,
            ticket_no=ticket_no,
            ticket_issue_name=ticket_issue_name,
            transaction_type=transaction_type,
            carrier_name=carrier_name,
            ticket_issue_city=ticket_issue_city,
            ticket_issue_date=ticket_issue_date,
            conjunction_ticket_indicator=conjunction_ticket_indicator,
            eticket_indicator=eticket_indicator,
            no_air_segments=no_air_segments,
            original_ticket_no=original_ticket_no,
            passenger_name=passenger_name,
            segment2=segment2,
            segment3=segment3,
            segment4=segment4,
            _configuration=_configuration,
            **kwargs,
        )

from citypay.model.airline_segment import AirlineSegment
