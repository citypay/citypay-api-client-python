# coding: utf-8

"""
    CityPay Payment API

     This CityPay API is a HTTP RESTful payment API used for direct server to server transactional processing. It provides a number of payment mechanisms including: Internet, MOTO, Continuous Authority transaction processing, 3-D Secure decision handling using RFA Secure, Authorisation, Refunding, Pre-Authorisation, Cancellation/Voids and Completion processing. The API is also capable of tokinsed payments using Card Holder Accounts.  ## Compliance and Security Your application will need to adhere to PCI-DSS standards to operate safely and to meet requirements set out by  Visa and MasterCard and the PCI Security Standards Council. These include  * Data must be collected using TLS version 1.2 using [strong cryptography](#enabled-tls-ciphers). We will not accept calls to our API at   lower grade encryption levels. We regularly scan our TLS endpoints for vulnerabilities and perform TLS assessments   as part of our compliance program. * The application must not store sensitive card holder data (CHD) such as the card security code (CSC) or   primary access number (PAN) * The application must not display the full card number on receipts, it is recommended to mask the PAN   and show the last 4 digits. The API will return this for you for ease of receipt creation * If you are developing a website, you will be required to perform regular scans on the network where you host the   application to meet your compliance obligations * You will be required to be PCI Compliant and the application must adhere to the security standard. Further information   is available from [https://www.pcisecuritystandards.org/](https://www.pcisecuritystandards.org/) * The API verifies that the request is for a valid account and originates from a trusted source using the remote IP   address. Our application firewalls analyse data that may be an attempt to break a large number of security common   security vulnerabilities.   # noqa: E501

    Contact: support@citypay.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from citypay import schemas  # noqa: F401


class BatchTransactionResultModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "result",
            "identifier",
            "account_id",
            "merchantid",
            "result_code",
            "message",
        }
        
        class properties:
            
            
            class account_id(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 5
            
            
            class identifier(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 50
                    min_length = 4
            merchantid = schemas.Int32Schema
            message = schemas.StrSchema
            result = schemas.Int32Schema
            result_code = schemas.StrSchema
            
            
            class amount(
                schemas.Int32Schema
            ):
            
            
                class MetaOapg:
                    format = 'int32'
            authcode = schemas.StrSchema
            datetime = schemas.DateTimeSchema
            maskedpan = schemas.StrSchema
            scheme = schemas.StrSchema
            transno = schemas.Int32Schema
            __annotations__ = {
                "account_id": account_id,
                "identifier": identifier,
                "merchantid": merchantid,
                "message": message,
                "result": result,
                "result_code": result_code,
                "amount": amount,
                "authcode": authcode,
                "datetime": datetime,
                "maskedpan": maskedpan,
                "scheme": scheme,
                "transno": transno,
            }
    
    result: MetaOapg.properties.result
    identifier: MetaOapg.properties.identifier
    account_id: MetaOapg.properties.account_id
    merchantid: MetaOapg.properties.merchantid
    result_code: MetaOapg.properties.result_code
    message: MetaOapg.properties.message
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["merchantid"]) -> MetaOapg.properties.merchantid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["result_code"]) -> MetaOapg.properties.result_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authcode"]) -> MetaOapg.properties.authcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime"]) -> MetaOapg.properties.datetime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maskedpan"]) -> MetaOapg.properties.maskedpan: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheme"]) -> MetaOapg.properties.scheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transno"]) -> MetaOapg.properties.transno: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id", "identifier", "merchantid", "message", "result", "result_code", "amount", "authcode", "datetime", "maskedpan", "scheme", "transno", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["identifier"]) -> MetaOapg.properties.identifier: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["merchantid"]) -> MetaOapg.properties.merchantid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result"]) -> MetaOapg.properties.result: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["result_code"]) -> MetaOapg.properties.result_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authcode"]) -> typing.Union[MetaOapg.properties.authcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime"]) -> typing.Union[MetaOapg.properties.datetime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maskedpan"]) -> typing.Union[MetaOapg.properties.maskedpan, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheme"]) -> typing.Union[MetaOapg.properties.scheme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transno"]) -> typing.Union[MetaOapg.properties.transno, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id", "identifier", "merchantid", "message", "result", "result_code", "amount", "authcode", "datetime", "maskedpan", "scheme", "transno", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        result: typing.Union[MetaOapg.properties.result, decimal.Decimal, int, ],
        identifier: typing.Union[MetaOapg.properties.identifier, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        merchantid: typing.Union[MetaOapg.properties.merchantid, decimal.Decimal, int, ],
        result_code: typing.Union[MetaOapg.properties.result_code, str, ],
        message: typing.Union[MetaOapg.properties.message, str, ],
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authcode: typing.Union[MetaOapg.properties.authcode, str, schemas.Unset] = schemas.unset,
        datetime: typing.Union[MetaOapg.properties.datetime, str, datetime, schemas.Unset] = schemas.unset,
        maskedpan: typing.Union[MetaOapg.properties.maskedpan, str, schemas.Unset] = schemas.unset,
        scheme: typing.Union[MetaOapg.properties.scheme, str, schemas.Unset] = schemas.unset,
        transno: typing.Union[MetaOapg.properties.transno, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BatchTransactionResultModel':
        return super().__new__(
            cls,
            *args,
            result=result,
            identifier=identifier,
            account_id=account_id,
            merchantid=merchantid,
            result_code=result_code,
            message=message,
            amount=amount,
            authcode=authcode,
            datetime=datetime,
            maskedpan=maskedpan,
            scheme=scheme,
            transno=transno,
            _configuration=_configuration,
            **kwargs,
        )
